#pragma once

#include "vector"
#include "map"
#include "set"
#include "string.h"
#include "stdlib.h"
#include "stdio.h"
#include "iostream"
#include "fstream"
#include "assert.h"
#include "sstream"
#include "time.h"
#include "math.h"

using namespace std;

typedef string HASHKEY;
#define HASHKEY_BIAS 4; // the bias to avoid negative key value, which takes 2 bytes in HASHKEY.

class m_LSH
{
private: // internal variables
	static const bool verbose = false; // true -> print info; false -> no print

	// LSH related variables
	int hashbits_num; // the number of bits for a hash key
	int data_dim; // the dimension of data feature (hash vector)
	int L; // the number of hash_families (hash tables)
	double r; // the denominator of E2LSH
	vector<double> b; // the random sampled scala for each hash function in [0,r]
	vector<vector<double> > hash_family; // the hash function family
	vector<map<HASHKEY, vector<unsigned int> > > m_tables; // the hash tables
	vector<vector<float> > features; // store all the N*dim data

public: 
	set<int> queryLSH(set<int> fea_ids); // query by <fea_ids> for NN feature ids

	void performLSH(string fea_filename);
	void hashOneTable(int _l);
	HASHKEY genBckKey(int fea_id, int hashfam_id);

	void initHashFamilies(int _hashbits_num, int _L, double _r, int _data_dim, string hashpool_file, string WXpool_file);

	vector<vector<float> > readBin(string fileName); // read binary file <.bin>
	vector<vector<float> > readBin(string fileName, int linenum); // <linenum> is the total num of lines to read
	void readFeatures(string fileName); // read in the feature vectors from bin file
	void normalizeFeature(vector<double> &fea);
	void normalizeFeature(vector<float> &fea);

	int getTotalFeaNum();
	int getDataDim();

	// substitution for B_fea_buf
	vector<float>& getFea(int id);

	// sample for <init_ids>
	vector<int> sampleInitIDs(int threshold, double sample_rate); // buckets with size bigger than <threshold> are sampled by <sample_rate> 

public: // system methods
	m_LSH(int _hashbits_num, int _L, double _r, int _data_dim, string hashpool_file, string WXpool_file);
	m_LSH(void);
	~m_LSH(void);
};

